# Like the poiseuille_2d.prm test, but instead of prescribing the
# velocity at the left and right ends, prescribe the horizontal
# component of the traction. At the same time, set the vertical
# component of the velocity to zero. This should yield the same answer.

set Dimension = 2
set CFL number                             = 1.0
set End time                               = 0
set Start time                             = 0
set Adiabatic surface temperature          = 0
set Surface pressure                       = 0
set Use years in output instead of seconds = false  # default: true
set Nonlinear solver scheme                = Newton Stokes #iterated IMPES
set Max nonlinear iterations = 20
set Min pre-Newton nonlinear iterations = 3 #15
set Nonlinear solver tolerance = 1e-7
set Nonlinear Newton solver switch tolerance = 1e-2 #e-7
set Linear solver tolerance = 1e-6
#set Output directory = tests/output-nonlinear_channel_flow/
#set Linear solver A block tolerance = 5e-1

subsection Boundary temperature model
  set Model name = box
  subsection Box
    set Left temperature = 0
  end
end


 subsection Initial conditions
   set Model name = function
   subsection Function
    set Function expression = 0
   end
 end


subsection Gravity model
  set Model name = vertical
  subsection Vertical
    set Magnitude = 0
  end
end


subsection Geometry model
  set Model name = box

  subsection Box
    set X extent = 10e3
    set Y extent = 8e3
  end
end


subsection Initial conditions
  set Model name = function
end


subsection Material model
  set Model name = simple nonlinear

  subsection Simple nonlinear 
    set Minimum viscosity = 1e1
    set Maximum viscosity = 1e55
    set Stress exponent = 4
    set Viscosity averaging p = 10000
  end

  subsection Simple model
    set Reference density             = 1
    set Reference specific heat       = 1
    set Reference temperature         = 1
    set Thermal conductivity          = 0
    set Thermal expansion coefficient = 0
    set Viscosity                     = 1
  end
end


subsection Mesh refinement
  set Initial adaptive refinement        = 0
  set Initial global refinement          = 5
end


subsection Model settings
  set Fixed temperature boundary indicators   = 2, 3
  # Prescribe a horizontal traction on the vertical boundaries
  set Prescribed traction boundary indicators = 2 y: function, 3 y: function
  set Tangential velocity boundary indicators = 
  set Zero velocity boundary indicators       = 0, 1
  # Prescribe a zero vertical velocity component on the vertical boundaries
  set Prescribed velocity boundary indicators = 2 x: function, 3 x: function #2 x: function, 3 x: function
end


subsection Boundary traction model
  subsection Function
    set Variable names = x,z
    # We want to prescribe a pressure of 2 at the left boundary
    # and -2 at the right boundary. 
    # The traction in this case is defined as:
    # tau =  - pressure * normal_vector.
    # On the left boundary, the outward pointing normal vector is 
    # (-1;0). On the right (1;0).
    # Therefore:
    # Left boundary:  tau = - pressure(left) (-1;0) = - (2) (-1;0) = (2;0).
    # Right boundary: tau = - pressure(right) (1;0) = - (-2) (1;0) = (2;0). 
    # Conveniently, the traction is the same on both boundaries.
    set Function expression = 0;if(z>0,0,1e9)
  end
end


subsection Boundary velocity model
  subsection Function
    set Function constants = n = 3
    set Variable names = x,z
    set Function expression = 0;0 #(1e-37/(n+1))*((1e9/8e3)^n)*(((5e3)^(n+1))-(x-(5e3)^(n+1))) 
  end
end


subsection Postprocess
  set List of postprocessors = velocity statistics, pressure statistics, mass flux statistics, visualization #, depth average
  subsection Depth average
    set List of output variables = viscosity
  end
  subsection Visualization
#    set Interpolate output = true
    set List of output variables = material properties,strain rate
    set Output format = gnuplot
  end
end


